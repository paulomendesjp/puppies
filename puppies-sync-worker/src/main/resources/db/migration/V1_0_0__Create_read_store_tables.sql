-- Read Store Tables for CQRS Implementation
-- These tables contain denormalized data optimized for query operations

-- Denormalized Posts Table
CREATE TABLE read_posts (
    id BIGINT PRIMARY KEY,
    author_id BIGINT NOT NULL,
    author_name VARCHAR(255) NOT NULL,
    content TEXT,
    image_url VARCHAR(500) NOT NULL,
    like_count BIGINT NOT NULL DEFAULT 0,
    comment_count BIGINT NOT NULL DEFAULT 0,
    view_count BIGINT NOT NULL DEFAULT 0,
    popularity_score DOUBLE PRECISION DEFAULT 0.0,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for read_posts
CREATE INDEX idx_read_posts_author_id ON read_posts(author_id);
CREATE INDEX idx_read_posts_created_at ON read_posts(created_at DESC);
CREATE INDEX idx_read_posts_popularity ON read_posts(popularity_score DESC);
CREATE INDEX idx_read_posts_like_count ON read_posts(like_count DESC);

-- Denormalized User Profiles Table
CREATE TABLE read_user_profiles (
    id BIGINT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    posts_count BIGINT NOT NULL DEFAULT 0,
    followers_count BIGINT NOT NULL DEFAULT 0,
    following_count BIGINT NOT NULL DEFAULT 0,
    total_likes_received BIGINT NOT NULL DEFAULT 0,
    total_likes_given BIGINT NOT NULL DEFAULT 0,
    created_at TIMESTAMP NOT NULL,
    last_active_at TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for read_user_profiles
CREATE INDEX idx_read_user_profiles_email ON read_user_profiles(email);
CREATE INDEX idx_read_user_profiles_posts_count ON read_user_profiles(posts_count DESC);
CREATE INDEX idx_read_user_profiles_likes_received ON read_user_profiles(total_likes_received DESC);

-- Denormalized Feed Items Table (Pre-calculated feeds)
CREATE TABLE read_feed_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    post_id BIGINT NOT NULL,
    post_author_id BIGINT NOT NULL,
    post_author_name VARCHAR(255) NOT NULL,
    post_content TEXT,
    post_image_url VARCHAR(500) NOT NULL,
    like_count BIGINT NOT NULL DEFAULT 0,
    is_liked_by_user BOOLEAN NOT NULL DEFAULT FALSE,
    popularity_score DOUBLE PRECISION DEFAULT 0.0,
    created_at TIMESTAMP NOT NULL,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Indexes for read_feed_items (Critical for performance)
CREATE INDEX idx_read_feed_items_user_created ON read_feed_items(user_id, created_at DESC);
CREATE INDEX idx_read_feed_items_post_id ON read_feed_items(post_id);
CREATE INDEX idx_read_feed_items_popularity ON read_feed_items(popularity_score DESC);
CREATE UNIQUE INDEX idx_read_feed_items_unique ON read_feed_items(user_id, post_id);

-- Optional: Materialized views for common aggregations
CREATE OR REPLACE VIEW read_trending_posts AS
SELECT 
    p.id,
    p.author_name,
    p.content,
    p.image_url,
    p.like_count,
    p.view_count,
    p.popularity_score,
    p.created_at,
    -- Calculate trending score based on likes, views and recency
    (p.like_count * 2.0 + p.view_count * 0.1) * 
    (1.0 / (1.0 + EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - p.created_at)) / 3600.0)) as trending_score
FROM read_posts p
WHERE p.created_at > CURRENT_TIMESTAMP - INTERVAL '24 hours'
ORDER BY trending_score DESC;

-- View for user statistics
CREATE OR REPLACE VIEW read_user_stats AS
SELECT 
    up.id,
    up.name,
    up.email,
    up.posts_count,
    up.total_likes_received,
    up.total_likes_given,
    -- Calculate engagement rate
    CASE 
        WHEN up.posts_count > 0 
        THEN up.total_likes_received::DOUBLE PRECISION / up.posts_count 
        ELSE 0.0 
    END as avg_likes_per_post,
    up.created_at,
    up.last_active_at
FROM read_user_profiles up;

-- Comments for documentation
COMMENT ON TABLE read_posts IS 'Denormalized posts table optimized for read operations';
COMMENT ON TABLE read_user_profiles IS 'Denormalized user profiles with aggregated statistics';
COMMENT ON TABLE read_feed_items IS 'Pre-calculated feed items for fast feed queries';
COMMENT ON VIEW read_trending_posts IS 'Real-time trending posts calculation';
COMMENT ON VIEW read_user_stats IS 'User statistics with calculated metrics';